version: "3.9"
 
services:
  db:
    image: postgres:14
    environment:
      - POSTGRES_DB=${POSTGRES_NAME}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - ./db-data:/var/lib/postgresql/data
    networks:
      ba_network:
        ipv4_address: 172.254.56.2
    restart: unless-stopped
  backend:
    build:
      context: .
      dockerfile: Dockerfile.django.dev
    command: python manage.py runserver 0.0.0.0:8000
    volumes:
      - ./backend:/code
    networks:
      ba_network:
        ipv4_address: 172.254.56.3
      behind_traefik:
    env_file:
      - .env
    labels:
      - traefik.enable=true
      - traefik.http.routers.backend.rule=Host(`${BACKEND_HOST}`)
      - traefik.http.routers.backend.tls.certresolver=lets-encrypt
      - traefik.http.services.backend.loadbalancer.server.port=8000
    depends_on:
      - db
    restart: unless-stopped
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.vue.dev
    networks:
      - behind_traefik
    environment:
      - VITE_SITENAME=${SITE_NAME}
      - VITE_API_HOST=${API_HOST}
    volumes:
    - './frontend:/app'
    # npm install is needed to populate /app/node_modules after startup of the container
    command: "bash -c 'npm install; npx vite --host --port 3000'"
    labels:
      - traefik.enable=true
      - traefik.http.routers.frontend.rule=Host(`${FRONTEND_HOST}`)
      - traefik.http.routers.frontend.tls.certresolver=lets-encrypt
      - traefik.http.services.frontend.loadbalancer.server.port=3000
    restart: unless-stopped
  redis:
    restart: unless-stopped 
    image: redis
    expose:
      - 6379
    networks:
      ba_network:
        ipv4_address: 172.254.56.4
  celery-worker: 
    build:
      context: .
      dockerfile: Dockerfile.django.dev
    restart: unless-stopped
    volumes:
      - ./backend:/code
    networks:
      ba_network:
        ipv4_address: 172.254.56.5
    env_file:
      - .env
    entrypoint: 'celery -A backend worker --loglevel=info'
    depends_on:
      - backend
      - redis
  celery-beat: 
    build:
      context: .
      dockerfile: Dockerfile.django.dev
    restart: unless-stopped
    volumes:
      - ./backend:/code
    networks:
      ba_network:
        ipv4_address: 172.254.56.6
    env_file:
      - .env
    entrypoint: 'celery -A backend beat --loglevel=info --scheduler django_celery_beat.schedulers:DatabaseScheduler'
    depends_on:
      - db
      - celery-worker
      - redis

  # for access to db and stuff without having to adjust ports
  vpn: 
    image: linuxserver/wireguard
    sysctls:
      - net.ipv4.conf.all.src_valid_mark=1
    cap_add:
      - NET_ADMIN
      - SYS_ADMIN
    volumes:
      - ./wireguard-config:/config
      - /lib/modules:/lib/modules
    networks:
      ba_network:
        ipv4_address: 172.254.56.7
    environment:
      - PEERS=1, bigcalc
      - INTERNAL_SUBNET=192.168.56.0/24
      - ALLOWEDIPS=192.168.56.0/24,172.254.56.0/24
    ports: 
      - 51820:51820/udp
    restart: unless-stopped
    
networks:
  ba_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.254.56.0/24
  behind_traefik:
    external: true
