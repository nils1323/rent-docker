version: "3.9"
 
services:
  db:        
    logging:
        options:
            max-size: "100m"
    build:
      context: .
      dockerfile: ./build_files/postgres/Dockerfile
    image: custom-postgres:14
    environment:
      - POSTGRES_DB=${POSTGRES_NAME}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - ./db-data:/var/lib/postgresql/data
    networks:
      ba_network:
        ipv4_address: 172.254.56.2
    restart: unless-stopped
  # we need a nginx server to serve staticfiles and proxy requests to the unicorn worker
  backend_nginx_server:        
    logging:
        options:
            max-size: "100m"
    build:
      context: .
      dockerfile: Dockerfile.backend-nginx.prod
    labels:
      - traefik.enable=true
      - traefik.http.routers.rent-backend.rule=Host(`${BACKEND_HOST}`)&&PathPrefix(`/django-admin`,`/media`,`/django-static`,`/api`)
      - traefik.http.routers.rent-backend.tls.certresolver=lets-encrypt
      - traefik.http.routers.rent-backend.tls=true
      - traefik.http.services.rent-backend.loadbalancer.server.port=80
      - traefik.docker.network=behind_traefik
    volumes:
      - ./backend/media:/code/media
      - ./backend/staticfiles:/code/staticfiles
    networks:
      behind_traefik:
      backend_proxy_net:
    restart: unless-stopped
  rent-backend:        
    logging:
        options:
            max-size: "100m"
    build:
      context: .
      dockerfile: Dockerfile.django.prod
    entrypoint: /build_files/django_startup.sh
    volumes:
      - ./backend/media:/code/media
      - ./backend/staticfiles:/code/staticfiles
    networks:
      ba_network:
        ipv4_address: 172.254.56.3
      backend_proxy_net:
    env_file:
      - .env
    environment:
      - DEBUG=false
    depends_on:
      - db
    restart: unless-stopped
  frontend:        
    logging:
        options:
            max-size: "100m"
    build:
      context: .
      dockerfile: Dockerfile.vue.prod
      args:
        - VITE_SITENAME=${SITE_NAME}
        - VITE_API_HOST=${API_HOST}
    networks:
      - behind_traefik
    environment:
      - VITE_SITENAME=${SITE_NAME}
      - VITE_API_HOST=${API_HOST}
    labels:
      - traefik.enable=true
      - traefik.http.routers.rent-frontend.rule=Host(`${FRONTEND_HOST}`)
      - traefik.http.routers.rent-frontend.tls.certresolver=lets-encrypt
      - traefik.http.routers.rent-frontend.tls=true
      - traefik.http.services.rent-frontend.loadbalancer.server.port=80
    restart: unless-stopped
  redis:        
    logging:
        options:
            max-size: "100m"
    restart: unless-stopped 
    image: redis
    expose:
      - 6379
    networks:
      ba_network:
        ipv4_address: 172.254.56.4
  celery-worker:         
    logging:
        options:
            max-size: "100m"
    build:
      context: .
      dockerfile: Dockerfile.django.prod
    restart: unless-stopped
    volumes:
      - ./backend/media:/code/media
    networks:
      ba_network:
        ipv4_address: 172.254.56.5
    env_file:
      - .env
    entrypoint: /build_files/celery_worker.sh
    environment:
      - DEBUG=false
    depends_on:
      - rent-backend
      - redis
  celery-beat:         
    logging:
        options:
            max-size: "100m"
    build:
      context: .
      dockerfile: Dockerfile.django.prod
    restart: unless-stopped
    volumes:
      - ./backend/media:/code/media
    networks:
      ba_network:
        ipv4_address: 172.254.56.6
    env_file:
      - .env
    entrypoint: /build_files/celery_beat.sh
    environment:
      - DEBUG=false
    depends_on:
      - db
      - celery-worker
      - redis
  
# only start it with this traefik config if there is no other traefik instance running on your system
# Uncomment if you need to test the production builds locally. You also need to uncomment the labels of the nginx proxies and comment the certresolver lines
# traefik:
#   image: "traefik:v2.10"
#   restart: unless-stopped
#   command:
#     - "--log.level=INFO"
#     - "--accesslog=true"
#     - "--api.dashboard=true"
#     - "--api.insecure=true"
#     - "--providers.docker=true"
#     - "--providers.docker.exposedbydefault=false"
#     - "--entrypoints.web.address=:80"
#     - "--entryPoints.web.http.redirections.entryPoint.to=websecure"
#     - "--entryPoints.web.http.redirections.entryPoint.scheme=https"
#     - "--entryPoints.web.http.redirections.entryPoint.permanent=false"
#     - "--entryPoints.websecure.address=:443"
#     - "--entryPoints.websecure.http.tls=true"
#     - "--providers.docker.network=behind_traefik"
#   ports:
#     - "127.0.0.1:443:443"
#     - "127.0.0.1:80:80"
#     - "127.0.0.1:8080:8080"
#   volumes: 
#     - "/var/run/docker.sock:/var/run/docker.sock:ro"
#   networks: 
#     behind_traefik:
#     ba_network:
#       ipv4_address: 172.254.56.7

networks:
  ba_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.254.56.0/24
  behind_traefik:
    external: true
  backend_proxy_net:
